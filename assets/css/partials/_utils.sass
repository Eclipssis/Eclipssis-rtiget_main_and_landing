@import "variables"

.text-dashed
  border-bottom: 1px dashed
  &:hover
    border-bottom: 1px dashed transparent

.divider
  opacity: 0.4
  border-bottom: 1px solid #A5A5A5
  margin: 25px 0

.d-inline-block
  display: inline-block

.text-center
  text-align: center!important

.text-left
  text-align: left

.text-right
  text-align: right

.justify-center
  justify-content: center

.justify-start
  justify-content: flex-start

.justify-end
  justify-content: flex-end

.justify-beetwen
  justify-content: space-between

.align-center
  align-items: center

.inline-middle
  display: inline-block
  vertical-align: middle

.text-uppercase
  text-transform: uppercase

.hidden
  overflow: hidden

.visible
  overflow: visible

.w-100
  width: 100%

// Responsive utils
$grid-breakpoints: (none: 0, xs: $xs, sm: $sm, md: $md, lg: $lg, xl: $xl)
$displays: none, inline, inline-block, block, table, table-row, table-cell, flex, inline-flex

@function breakpoint-min($name, $breakpoints: $grid-breakpoints) 
  $min: map-get($breakpoints, $name)
  @return if($min != 0, $min, null)

@function breakpoint-min($name, $breakpoints: $grid-breakpoints)
  $min: map-get($breakpoints, $name)
  @return if($min != 0, $min, null)

@function breakpoint-infix($name, $breakpoints: $grid-breakpoints)
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}")


@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints)
  $min: breakpoint-min($name, $breakpoints)
  @if $min 
    @media (min-width: $min) 
      @content
    
  @else 
    @content

@each $breakpoint in map-keys($grid-breakpoints) 
  @include media-breakpoint-up($breakpoint) 
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints)

    @each $value in $displays
      .d#{$infix}-#{$value}
        display: $value !important

// Spaces
$spacer: 1rem
$spacers: ()
$spacers: map-merge((0: 0, 1: ($spacer * .25), 2: ($spacer * .5), 3: $spacer, 4: ($spacer * 1.5), 5: ($spacer * 3) ), $spacers )

@each $breakpoint in map-keys($grid-breakpoints) 
  @include media-breakpoint-up($breakpoint) 
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints)

    @each $prop, $abbrev in (margin: m, padding: p) 
      @each $size, $length in $spacers 
        .#{$abbrev}#{$infix}-#{$size}
          #{$prop}: $length !important

        .#{$abbrev}t#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size}
          #{$prop}-top: $length !important
        
        .#{$abbrev}r#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size} 
          #{$prop}-right: $length !important
        
        .#{$abbrev}b#{$infix}-#{$size},
        .#{$abbrev}y#{$infix}-#{$size}
          #{$prop}-bottom: $length !important
        
        .#{$abbrev}l#{$infix}-#{$size},
        .#{$abbrev}x#{$infix}-#{$size}
          #{$prop}-left: $length !important

    // Some special margin utils
    .m#{$infix}-auto
      margin: auto !important
    .mt#{$infix}-auto,
    .my#{$infix}-auto 
      margin-top: auto !important
    
    .mr#{$infix}-auto,
    .mx#{$infix}-auto 
      margin-right: auto !important
    
    .mb#{$infix}-auto,
    .my#{$infix}-auto 
      margin-bottom: auto !important
    
    .ml#{$infix}-auto,
    .mx#{$infix}-auto 
      margin-left: auto !important
    
// Grid

$grid-columns:        12 !default
$grid-gutter-width:   30px !default
$grid-row-columns:    6 !default

@mixin make-row($gutter: $grid-gutter-width) 
  display: flex
  flex-wrap: wrap
  margin-right: -$gutter / 2
  margin-left: -$gutter / 2


@mixin make-col-ready($gutter: $grid-gutter-width) 
  position: relative
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%
  padding-right: $gutter / 2
  padding-left: $gutter / 2


@mixin make-col($size, $columns: $grid-columns) 
  flex: 0 0 percentage($size / $columns)
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns)


@mixin make-col-auto() 
  flex: 0 0 auto
  width: auto
  max-width: 100% // Reset earlier grid tiers


@mixin make-col-offset($size, $columns: $grid-columns) 
  $num: $size / $columns
  margin-left: if($num == 0, 0, percentage($num))


// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) 
  & > * 
    flex: 0 0 100% / $count
    max-width: 100% / $count
  
@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints)
  // Common properties for all breakpoints
  %grid-column 
    position: relative
    width: 100%
    padding-right: $gutter / 2
    padding-left: $gutter / 2
  

  @each $breakpoint in map-keys($breakpoints) 
    $infix: breakpoint-infix($breakpoint, $breakpoints)

    @if $columns > 0 
      // Allow columns to stretch full width below their breakpoints
      @for $i from 1 through $columns 
        .col#{$infix}-#{$i} 
          @extend %grid-column;
        
      
    

    .col#{$infix},
    .col#{$infix}-auto 
      @extend %grid-column;
    

    @include media-breakpoint-up($breakpoint, $breakpoints) 
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} 
        flex-basis: 0
        flex-grow: 1
        min-width: 0 // See https://github.com/twbs/bootstrap/issues/25410
        max-width: 100%
      

      @if $grid-row-columns > 0 
        @for $i from 1 through $grid-row-columns 
          .row-cols#{$infix}-#{$i} 
            @include row-cols($i)
          
        
      

      .col#{$infix}-auto 
        @include make-col-auto()
      

      @if $columns > 0 
        @for $i from 1 through $columns 
          .col#{$infix}-#{$i} 
            @include make-col($i, $columns)
          
        
      

      .order#{$infix}-first
        order: -1 

      .order#{$infix}-last 
        order: $columns + 1 

      @for $i from 0 through $columns 
        .order#{$infix}-#{$i} 
          order: $i 
      

      @if $columns > 0 
        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) 
          @if not ($infix == "" and $i == 0)  // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} 
              @include make-col-offset($i, $columns)

@include make-grid-columns()

.row 
  @include make-row()


// Remove the negative margin from default .row, then the horizontal padding
// from all immediate children columns (to prevent runaway style inheritance).
.no-gutters 
  margin-right: 0
  margin-left: 0

  > .col,
  > [class*="col-"] 
    padding-right: 0
    padding-left: 0
  
